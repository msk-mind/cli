# coding: utf-8

"""
    MSK-MIND REST API

    MSK-MIND REST API  # noqa: E501

    The version of the OpenAPI document: v0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AtlasTermAssignmentHeader(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'term_guid': 'str',
        'relation_guid': 'str',
        'description': 'str',
        'display_text': 'str',
        'expression': 'str',
        'created_by': 'str',
        'steward': 'str',
        'source': 'str',
        'confidence': 'int',
        'status': 'str'
    }

    attribute_map = {
        'term_guid': 'termGuid',
        'relation_guid': 'relationGuid',
        'description': 'description',
        'display_text': 'displayText',
        'expression': 'expression',
        'created_by': 'createdBy',
        'steward': 'steward',
        'source': 'source',
        'confidence': 'confidence',
        'status': 'status'
    }

    def __init__(self, term_guid=None, relation_guid=None, description=None, display_text=None, expression=None, created_by=None, steward=None, source=None, confidence=None, status=None, local_vars_configuration=None):  # noqa: E501
        """AtlasTermAssignmentHeader - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._term_guid = None
        self._relation_guid = None
        self._description = None
        self._display_text = None
        self._expression = None
        self._created_by = None
        self._steward = None
        self._source = None
        self._confidence = None
        self._status = None
        self.discriminator = None

        if term_guid is not None:
            self.term_guid = term_guid
        if relation_guid is not None:
            self.relation_guid = relation_guid
        if description is not None:
            self.description = description
        if display_text is not None:
            self.display_text = display_text
        if expression is not None:
            self.expression = expression
        if created_by is not None:
            self.created_by = created_by
        if steward is not None:
            self.steward = steward
        if source is not None:
            self.source = source
        if confidence is not None:
            self.confidence = confidence
        if status is not None:
            self.status = status

    @property
    def term_guid(self):
        """Gets the term_guid of this AtlasTermAssignmentHeader.  # noqa: E501


        :return: The term_guid of this AtlasTermAssignmentHeader.  # noqa: E501
        :rtype: str
        """
        return self._term_guid

    @term_guid.setter
    def term_guid(self, term_guid):
        """Sets the term_guid of this AtlasTermAssignmentHeader.


        :param term_guid: The term_guid of this AtlasTermAssignmentHeader.  # noqa: E501
        :type: str
        """

        self._term_guid = term_guid

    @property
    def relation_guid(self):
        """Gets the relation_guid of this AtlasTermAssignmentHeader.  # noqa: E501


        :return: The relation_guid of this AtlasTermAssignmentHeader.  # noqa: E501
        :rtype: str
        """
        return self._relation_guid

    @relation_guid.setter
    def relation_guid(self, relation_guid):
        """Sets the relation_guid of this AtlasTermAssignmentHeader.


        :param relation_guid: The relation_guid of this AtlasTermAssignmentHeader.  # noqa: E501
        :type: str
        """

        self._relation_guid = relation_guid

    @property
    def description(self):
        """Gets the description of this AtlasTermAssignmentHeader.  # noqa: E501


        :return: The description of this AtlasTermAssignmentHeader.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AtlasTermAssignmentHeader.


        :param description: The description of this AtlasTermAssignmentHeader.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def display_text(self):
        """Gets the display_text of this AtlasTermAssignmentHeader.  # noqa: E501


        :return: The display_text of this AtlasTermAssignmentHeader.  # noqa: E501
        :rtype: str
        """
        return self._display_text

    @display_text.setter
    def display_text(self, display_text):
        """Sets the display_text of this AtlasTermAssignmentHeader.


        :param display_text: The display_text of this AtlasTermAssignmentHeader.  # noqa: E501
        :type: str
        """

        self._display_text = display_text

    @property
    def expression(self):
        """Gets the expression of this AtlasTermAssignmentHeader.  # noqa: E501


        :return: The expression of this AtlasTermAssignmentHeader.  # noqa: E501
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this AtlasTermAssignmentHeader.


        :param expression: The expression of this AtlasTermAssignmentHeader.  # noqa: E501
        :type: str
        """

        self._expression = expression

    @property
    def created_by(self):
        """Gets the created_by of this AtlasTermAssignmentHeader.  # noqa: E501


        :return: The created_by of this AtlasTermAssignmentHeader.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this AtlasTermAssignmentHeader.


        :param created_by: The created_by of this AtlasTermAssignmentHeader.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def steward(self):
        """Gets the steward of this AtlasTermAssignmentHeader.  # noqa: E501


        :return: The steward of this AtlasTermAssignmentHeader.  # noqa: E501
        :rtype: str
        """
        return self._steward

    @steward.setter
    def steward(self, steward):
        """Sets the steward of this AtlasTermAssignmentHeader.


        :param steward: The steward of this AtlasTermAssignmentHeader.  # noqa: E501
        :type: str
        """

        self._steward = steward

    @property
    def source(self):
        """Gets the source of this AtlasTermAssignmentHeader.  # noqa: E501


        :return: The source of this AtlasTermAssignmentHeader.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this AtlasTermAssignmentHeader.


        :param source: The source of this AtlasTermAssignmentHeader.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def confidence(self):
        """Gets the confidence of this AtlasTermAssignmentHeader.  # noqa: E501


        :return: The confidence of this AtlasTermAssignmentHeader.  # noqa: E501
        :rtype: int
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this AtlasTermAssignmentHeader.


        :param confidence: The confidence of this AtlasTermAssignmentHeader.  # noqa: E501
        :type: int
        """

        self._confidence = confidence

    @property
    def status(self):
        """Gets the status of this AtlasTermAssignmentHeader.  # noqa: E501


        :return: The status of this AtlasTermAssignmentHeader.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AtlasTermAssignmentHeader.


        :param status: The status of this AtlasTermAssignmentHeader.  # noqa: E501
        :type: str
        """
        allowed_values = ["DISCOVERED", "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", "OTHER"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AtlasTermAssignmentHeader):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AtlasTermAssignmentHeader):
            return True

        return self.to_dict() != other.to_dict()
