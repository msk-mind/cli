# coding: utf-8

"""
    MSK-MIND REST API

    MSK-MIND REST API  # noqa: E501

    The version of the OpenAPI document: v0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AtlasEntity(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type_name': 'str',
        'attributes': 'dict(str, object)',
        'guid': 'str',
        'home_id': 'str',
        'is_proxy': 'bool',
        'provenance_type': 'int',
        'status': 'str',
        'created_by': 'str',
        'updated_by': 'str',
        'create_time': 'datetime',
        'update_time': 'datetime',
        'version': 'int',
        'relationship_attributes': 'dict(str, object)',
        'classifications': 'list[AtlasClassification]',
        'meanings': 'list[AtlasTermAssignmentHeader]',
        'proxy': 'bool'
    }

    attribute_map = {
        'type_name': 'typeName',
        'attributes': 'attributes',
        'guid': 'guid',
        'home_id': 'homeId',
        'is_proxy': 'isProxy',
        'provenance_type': 'provenanceType',
        'status': 'status',
        'created_by': 'createdBy',
        'updated_by': 'updatedBy',
        'create_time': 'createTime',
        'update_time': 'updateTime',
        'version': 'version',
        'relationship_attributes': 'relationshipAttributes',
        'classifications': 'classifications',
        'meanings': 'meanings',
        'proxy': 'proxy'
    }

    def __init__(self, type_name=None, attributes=None, guid=None, home_id=None, is_proxy=None, provenance_type=None, status=None, created_by=None, updated_by=None, create_time=None, update_time=None, version=None, relationship_attributes=None, classifications=None, meanings=None, proxy=None, local_vars_configuration=None):  # noqa: E501
        """AtlasEntity - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type_name = None
        self._attributes = None
        self._guid = None
        self._home_id = None
        self._is_proxy = None
        self._provenance_type = None
        self._status = None
        self._created_by = None
        self._updated_by = None
        self._create_time = None
        self._update_time = None
        self._version = None
        self._relationship_attributes = None
        self._classifications = None
        self._meanings = None
        self._proxy = None
        self.discriminator = None

        if type_name is not None:
            self.type_name = type_name
        if attributes is not None:
            self.attributes = attributes
        if guid is not None:
            self.guid = guid
        if home_id is not None:
            self.home_id = home_id
        if is_proxy is not None:
            self.is_proxy = is_proxy
        if provenance_type is not None:
            self.provenance_type = provenance_type
        if status is not None:
            self.status = status
        if created_by is not None:
            self.created_by = created_by
        if updated_by is not None:
            self.updated_by = updated_by
        if create_time is not None:
            self.create_time = create_time
        if update_time is not None:
            self.update_time = update_time
        if version is not None:
            self.version = version
        if relationship_attributes is not None:
            self.relationship_attributes = relationship_attributes
        if classifications is not None:
            self.classifications = classifications
        if meanings is not None:
            self.meanings = meanings
        if proxy is not None:
            self.proxy = proxy

    @property
    def type_name(self):
        """Gets the type_name of this AtlasEntity.  # noqa: E501


        :return: The type_name of this AtlasEntity.  # noqa: E501
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this AtlasEntity.


        :param type_name: The type_name of this AtlasEntity.  # noqa: E501
        :type: str
        """

        self._type_name = type_name

    @property
    def attributes(self):
        """Gets the attributes of this AtlasEntity.  # noqa: E501


        :return: The attributes of this AtlasEntity.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this AtlasEntity.


        :param attributes: The attributes of this AtlasEntity.  # noqa: E501
        :type: dict(str, object)
        """

        self._attributes = attributes

    @property
    def guid(self):
        """Gets the guid of this AtlasEntity.  # noqa: E501


        :return: The guid of this AtlasEntity.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this AtlasEntity.


        :param guid: The guid of this AtlasEntity.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def home_id(self):
        """Gets the home_id of this AtlasEntity.  # noqa: E501


        :return: The home_id of this AtlasEntity.  # noqa: E501
        :rtype: str
        """
        return self._home_id

    @home_id.setter
    def home_id(self, home_id):
        """Sets the home_id of this AtlasEntity.


        :param home_id: The home_id of this AtlasEntity.  # noqa: E501
        :type: str
        """

        self._home_id = home_id

    @property
    def is_proxy(self):
        """Gets the is_proxy of this AtlasEntity.  # noqa: E501


        :return: The is_proxy of this AtlasEntity.  # noqa: E501
        :rtype: bool
        """
        return self._is_proxy

    @is_proxy.setter
    def is_proxy(self, is_proxy):
        """Sets the is_proxy of this AtlasEntity.


        :param is_proxy: The is_proxy of this AtlasEntity.  # noqa: E501
        :type: bool
        """

        self._is_proxy = is_proxy

    @property
    def provenance_type(self):
        """Gets the provenance_type of this AtlasEntity.  # noqa: E501


        :return: The provenance_type of this AtlasEntity.  # noqa: E501
        :rtype: int
        """
        return self._provenance_type

    @provenance_type.setter
    def provenance_type(self, provenance_type):
        """Sets the provenance_type of this AtlasEntity.


        :param provenance_type: The provenance_type of this AtlasEntity.  # noqa: E501
        :type: int
        """

        self._provenance_type = provenance_type

    @property
    def status(self):
        """Gets the status of this AtlasEntity.  # noqa: E501


        :return: The status of this AtlasEntity.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AtlasEntity.


        :param status: The status of this AtlasEntity.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "DELETED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def created_by(self):
        """Gets the created_by of this AtlasEntity.  # noqa: E501


        :return: The created_by of this AtlasEntity.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this AtlasEntity.


        :param created_by: The created_by of this AtlasEntity.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def updated_by(self):
        """Gets the updated_by of this AtlasEntity.  # noqa: E501


        :return: The updated_by of this AtlasEntity.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this AtlasEntity.


        :param updated_by: The updated_by of this AtlasEntity.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def create_time(self):
        """Gets the create_time of this AtlasEntity.  # noqa: E501


        :return: The create_time of this AtlasEntity.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this AtlasEntity.


        :param create_time: The create_time of this AtlasEntity.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    @property
    def update_time(self):
        """Gets the update_time of this AtlasEntity.  # noqa: E501


        :return: The update_time of this AtlasEntity.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this AtlasEntity.


        :param update_time: The update_time of this AtlasEntity.  # noqa: E501
        :type: datetime
        """

        self._update_time = update_time

    @property
    def version(self):
        """Gets the version of this AtlasEntity.  # noqa: E501


        :return: The version of this AtlasEntity.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AtlasEntity.


        :param version: The version of this AtlasEntity.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def relationship_attributes(self):
        """Gets the relationship_attributes of this AtlasEntity.  # noqa: E501


        :return: The relationship_attributes of this AtlasEntity.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._relationship_attributes

    @relationship_attributes.setter
    def relationship_attributes(self, relationship_attributes):
        """Sets the relationship_attributes of this AtlasEntity.


        :param relationship_attributes: The relationship_attributes of this AtlasEntity.  # noqa: E501
        :type: dict(str, object)
        """

        self._relationship_attributes = relationship_attributes

    @property
    def classifications(self):
        """Gets the classifications of this AtlasEntity.  # noqa: E501


        :return: The classifications of this AtlasEntity.  # noqa: E501
        :rtype: list[AtlasClassification]
        """
        return self._classifications

    @classifications.setter
    def classifications(self, classifications):
        """Sets the classifications of this AtlasEntity.


        :param classifications: The classifications of this AtlasEntity.  # noqa: E501
        :type: list[AtlasClassification]
        """

        self._classifications = classifications

    @property
    def meanings(self):
        """Gets the meanings of this AtlasEntity.  # noqa: E501


        :return: The meanings of this AtlasEntity.  # noqa: E501
        :rtype: list[AtlasTermAssignmentHeader]
        """
        return self._meanings

    @meanings.setter
    def meanings(self, meanings):
        """Sets the meanings of this AtlasEntity.


        :param meanings: The meanings of this AtlasEntity.  # noqa: E501
        :type: list[AtlasTermAssignmentHeader]
        """

        self._meanings = meanings

    @property
    def proxy(self):
        """Gets the proxy of this AtlasEntity.  # noqa: E501


        :return: The proxy of this AtlasEntity.  # noqa: E501
        :rtype: bool
        """
        return self._proxy

    @proxy.setter
    def proxy(self, proxy):
        """Sets the proxy of this AtlasEntity.


        :param proxy: The proxy of this AtlasEntity.  # noqa: E501
        :type: bool
        """

        self._proxy = proxy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AtlasEntity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AtlasEntity):
            return True

        return self.to_dict() != other.to_dict()
