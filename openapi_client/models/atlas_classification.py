# coding: utf-8

"""
    MSK-MIND REST API

    MSK-MIND REST API  # noqa: E501

    The version of the OpenAPI document: v0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AtlasClassification(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type_name': 'str',
        'attributes': 'dict(str, object)',
        'entity_guid': 'str',
        'entity_status': 'str',
        'propagate': 'bool',
        'validity_periods': 'list[TimeBoundary]',
        'remove_propagations_on_entity_delete': 'bool'
    }

    attribute_map = {
        'type_name': 'typeName',
        'attributes': 'attributes',
        'entity_guid': 'entityGuid',
        'entity_status': 'entityStatus',
        'propagate': 'propagate',
        'validity_periods': 'validityPeriods',
        'remove_propagations_on_entity_delete': 'removePropagationsOnEntityDelete'
    }

    def __init__(self, type_name=None, attributes=None, entity_guid=None, entity_status=None, propagate=None, validity_periods=None, remove_propagations_on_entity_delete=None, local_vars_configuration=None):  # noqa: E501
        """AtlasClassification - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type_name = None
        self._attributes = None
        self._entity_guid = None
        self._entity_status = None
        self._propagate = None
        self._validity_periods = None
        self._remove_propagations_on_entity_delete = None
        self.discriminator = None

        if type_name is not None:
            self.type_name = type_name
        if attributes is not None:
            self.attributes = attributes
        if entity_guid is not None:
            self.entity_guid = entity_guid
        if entity_status is not None:
            self.entity_status = entity_status
        if propagate is not None:
            self.propagate = propagate
        if validity_periods is not None:
            self.validity_periods = validity_periods
        if remove_propagations_on_entity_delete is not None:
            self.remove_propagations_on_entity_delete = remove_propagations_on_entity_delete

    @property
    def type_name(self):
        """Gets the type_name of this AtlasClassification.  # noqa: E501


        :return: The type_name of this AtlasClassification.  # noqa: E501
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this AtlasClassification.


        :param type_name: The type_name of this AtlasClassification.  # noqa: E501
        :type: str
        """

        self._type_name = type_name

    @property
    def attributes(self):
        """Gets the attributes of this AtlasClassification.  # noqa: E501


        :return: The attributes of this AtlasClassification.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this AtlasClassification.


        :param attributes: The attributes of this AtlasClassification.  # noqa: E501
        :type: dict(str, object)
        """

        self._attributes = attributes

    @property
    def entity_guid(self):
        """Gets the entity_guid of this AtlasClassification.  # noqa: E501


        :return: The entity_guid of this AtlasClassification.  # noqa: E501
        :rtype: str
        """
        return self._entity_guid

    @entity_guid.setter
    def entity_guid(self, entity_guid):
        """Sets the entity_guid of this AtlasClassification.


        :param entity_guid: The entity_guid of this AtlasClassification.  # noqa: E501
        :type: str
        """

        self._entity_guid = entity_guid

    @property
    def entity_status(self):
        """Gets the entity_status of this AtlasClassification.  # noqa: E501


        :return: The entity_status of this AtlasClassification.  # noqa: E501
        :rtype: str
        """
        return self._entity_status

    @entity_status.setter
    def entity_status(self, entity_status):
        """Sets the entity_status of this AtlasClassification.


        :param entity_status: The entity_status of this AtlasClassification.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "DELETED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and entity_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `entity_status` ({0}), must be one of {1}"  # noqa: E501
                .format(entity_status, allowed_values)
            )

        self._entity_status = entity_status

    @property
    def propagate(self):
        """Gets the propagate of this AtlasClassification.  # noqa: E501


        :return: The propagate of this AtlasClassification.  # noqa: E501
        :rtype: bool
        """
        return self._propagate

    @propagate.setter
    def propagate(self, propagate):
        """Sets the propagate of this AtlasClassification.


        :param propagate: The propagate of this AtlasClassification.  # noqa: E501
        :type: bool
        """

        self._propagate = propagate

    @property
    def validity_periods(self):
        """Gets the validity_periods of this AtlasClassification.  # noqa: E501


        :return: The validity_periods of this AtlasClassification.  # noqa: E501
        :rtype: list[TimeBoundary]
        """
        return self._validity_periods

    @validity_periods.setter
    def validity_periods(self, validity_periods):
        """Sets the validity_periods of this AtlasClassification.


        :param validity_periods: The validity_periods of this AtlasClassification.  # noqa: E501
        :type: list[TimeBoundary]
        """

        self._validity_periods = validity_periods

    @property
    def remove_propagations_on_entity_delete(self):
        """Gets the remove_propagations_on_entity_delete of this AtlasClassification.  # noqa: E501


        :return: The remove_propagations_on_entity_delete of this AtlasClassification.  # noqa: E501
        :rtype: bool
        """
        return self._remove_propagations_on_entity_delete

    @remove_propagations_on_entity_delete.setter
    def remove_propagations_on_entity_delete(self, remove_propagations_on_entity_delete):
        """Sets the remove_propagations_on_entity_delete of this AtlasClassification.


        :param remove_propagations_on_entity_delete: The remove_propagations_on_entity_delete of this AtlasClassification.  # noqa: E501
        :type: bool
        """

        self._remove_propagations_on_entity_delete = remove_propagations_on_entity_delete

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AtlasClassification):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AtlasClassification):
            return True

        return self.to_dict() != other.to_dict()
